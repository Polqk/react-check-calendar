{"version":3,"sources":["../../src/Left.tsx","../../src/Right.tsx","../../src/defaults.ts","../../src/context.tsx","../../src/helpers.ts","../../src/RowHeader.tsx","../../src/ColumnDate.tsx","../../src/CheckBox/index.tsx","../../src/index.tsx","App.js","index.js"],"names":["Left","height","viewBox","d","Right","defaultProps","startWeekDay","checkedDates","disabledDates","locale","hoursIntervals","start","end","hideDays","defaultContext","props","defaultDatesFormats","fromHour","toHour","CheckContext","React","CheckContextProvider","getMomentFromNumber","date","trunced","Math","value","isInInterval","interval1","getMomentsFromRange","interval2","start2","end2","interval","getMomentFromDate","moment","RowHeader","item","getDatesFormats","className","classNames","HTMLParser","ColumnDate","format","Checkbox","disableBefore","disableAfter","isBeforeDisabled","isAfterDisabled","isDisabledDate","Array","disabled","onChange","e","checked","type","CheckCalendar","state","loading","currentDate","checkedRanges","_handlePrevious","setTimeout","_handleNext","_handleChange","newChecked","foundIndex","c","i","dates","moments","render","this","max","min","leftButton","rightButton","containerClassName","tableClassName","headerClassName","contentClassName","clonedStart","getArrayDates","onClick","ref","key","current","row","day","App","useState","set","Date","setDates","subtract","add","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f762b2dc.chunk.js","sourcesContent":["import * as React from 'react';\n\ninterface Props {\n}\n\nconst Left: React.FC<Props> = () => (\n  <svg\n    height={30}\n    viewBox=\"0 0 320 512\"\n  >\n    <path\n      d=\"M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49\n      256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-\n      9.37-9.37-9.37-24.57 0-33.94z\"\n    />\n  </svg>\n);\n\nexport default Left;\n","import * as React from 'react';\n\ninterface Props {\n}\n\nconst Right: React.FC<Props> = () => (\n  <svg\n    height={30}\n    viewBox=\"0 0 320 512\"\n  >\n    <path\n      d=\"M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522\n      -.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373\n       33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z\"\n    />\n  </svg>\n);\n\nexport default Right;\n","import {CheckCalendarContext, CheckCalendarProps, DatesFormats} from \"./types\";\n\nexport const defaultProps: CheckCalendarProps = {\n  startWeekDay: 1,\n  checkedDates: [],\n  disabledDates: [],\n  locale: 'en',\n  hoursIntervals: [\n    { start: 8, end: 10 },\n    { start: 10, end: 12 },\n    { start: 13, end: 15 },\n    { start: 15, end: 17 }\n  ],\n  hideDays: [0, 6]\n};\n\nexport const defaultContext: CheckCalendarContext = {\n  props: defaultProps\n};\n\nexport const defaultDatesFormats: DatesFormats = {\n  fromHour: '[from] [<strong>]h:mm[</strong>][<small>]a[</small>]',\n  toHour: ' [to] [<strong>]h:mm[</strong>][<small>]a[</small>]'\n};\n","import * as React from 'react';\nimport { CheckCalendarContext } from \"./types\";\nimport {defaultContext} from \"./defaults\";\n\nconst CheckContext = React.createContext<CheckCalendarContext>(defaultContext);\nexport const CheckContextProvider = CheckContext.Provider;\nexport default CheckContext;\n","import moment from 'moment';\nimport {CheckCalendarProps, MomentOrDateRange, MomentRange} from \"./types\";\nimport { defaultDatesFormats } from \"./defaults\";\n\nexport const getMomentFromNumber = (date: moment.Moment, value: number) => {\n  const trunced =  Math.trunc(value);\n  return date.clone()\n    .set('hour', trunced)\n    .set('minutes', (value - trunced) * 60)\n    .set('second', 0)\n    .set('millisecond', 0);\n};\n\nexport const getDatesFormats = (props: CheckCalendarProps) =>\n  ({ ...defaultDatesFormats, ...props.datesFormats });\n\nexport const getArrayDates = (start: moment.Moment, count: number) => {\n  const dates = []\n\n  const clonedStart = start.clone().set('hour', 0).set('minute', 0).set('second', 0).set('millisecond', 0);\n\n  for (let i = 0; i < count; i++) {\n    dates.push(clonedStart.clone().add(i, 'day'));\n  }\n\n  return dates;\n};\n\nexport const isInInterval = (interval1: MomentOrDateRange, interval2: MomentOrDateRange) => {\n  const { start, end } = getMomentsFromRange(interval1);\n  const { start: start2, end: end2 } = getMomentsFromRange(interval2);\n\n  return start.isSame(start2, \"minute\") ||\n    end.isSame(end2, \"minute\") ||\n    start.isBetween(start2, end2, 'minutes', '()') ||\n    end.isBetween(start2, end2, 'minutes', '()');\n}\n\nexport const getMomentsFromRange = (interval: MomentOrDateRange): MomentRange => ({\n  start: getMomentFromDate(interval.start),\n  end: getMomentFromDate(interval.end)\n})\n\nexport const getMomentFromDate = (date: Date | moment.Moment | string) =>\n  date instanceof moment ? date as moment.Moment : moment(date);\n","import * as React from 'react';\nimport {HourInterval} from \"./types\";\nimport {getDatesFormats, getMomentFromNumber} from \"./helpers\";\nimport HTMLParser from \"html-react-parser\";\nimport CheckContext from \"./context\";\nimport moment from \"moment\";\nimport classNames from \"classnames\";\n\ninterface Props {\n  item: HourInterval;\n}\n\nconst RowHeader: React.FC<Props> = ({ item }) => {\n  const { props } = React.useContext(CheckContext);\n  const { start, end } = item;\n  const { fromHour, toHour } = getDatesFormats(props);\n\n  return (\n      <td className={classNames('check-calendar__row-header', props.headerRowClassName)}>\n        <div className=\"check-calendar__hour\">\n          {start && HTMLParser(`<span>${\n            getMomentFromNumber(moment(), start).format(fromHour)\n              .replace(fromHour.charAt(fromHour.indexOf('mm') - 1) + '00', '') || ''}</span>`)}\n          {end && HTMLParser(`<span>${\n            getMomentFromNumber(moment(), end).format(toHour)\n              .replace(fromHour.charAt(fromHour.indexOf('mm') - 1) + '00', '') || ''\n          }</span>`)}\n        </div>\n      </td>\n  )\n}\n\nexport default RowHeader;\n","import * as React from 'react';\nimport Moment from \"react-moment\";\nimport * as moment from \"moment\";\nimport CheckContext from \"./context\";\n\ninterface Props {\n  date: moment.Moment;\n}\n\nconst ColumnDate: React.FC<Props> = ({ date }) => {\n  const { props } = React.useContext(CheckContext);\n  return (\n    <div>\n      <div>\n        <Moment\n          className=\"check-calendar_day\"\n          locale={props?.locale}\n          format=\"ddd\"\n        >\n          {date}\n        </Moment>\n      </div>\n      <div>\n        <Moment\n          className=\"check-calendar__day-number\"\n          locale=\"fr\"\n          format=\"DD\"\n        >\n          {date}\n        </Moment>\n      </div>\n      <div>\n        <Moment\n          className=\"check-calendar__month\"\n          locale=\"fr\"\n          format=\"MMM\"\n        >\n          {date}\n        </Moment>\n      </div>\n      <div\n        // class=\"d-optionDetails\"\n      />\n    </div>\n  );\n}\n\nexport default ColumnDate;\n","import * as React from 'react';\nimport './checkbox.css';\nimport classNames from 'classnames';\nimport {MomentRange} from \"../types\";\nimport {getMomentFromDate} from \"../helpers\";\nimport CheckContext from \"../context\";\n\nexport type CheckBoxChangeHandler = (value: boolean, props: Props) => void;\ntype CheckboxProps = {\n  ref?: any;\n  onChange: CheckBoxChangeHandler;\n  interval: MomentRange;\n}\n\ntype InputProps = Omit<React.InputHTMLAttributes<HTMLInputElement>, 'onChange'>;\ntype Props = CheckboxProps & InputProps;\n\nconst Checkbox: React.FC<Props> = ({interval, ...props}) => {\n  const {props: { disableBefore, disableAfter, disabledDates } } = React.useContext(CheckContext);\n\n  const _handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.checked;\n    props.onChange(value, {...props, checked: value, value: value ? 0 : 1, interval })\n  };\n\n  const isBeforeDisabled = disableBefore ? interval.end.isBefore(getMomentFromDate(disableBefore)) : false;\n  const isAfterDisabled = disableAfter ? interval.start.isAfter(getMomentFromDate(disableAfter)) : false;\n  const isDisabledDate = Array.isArray(disabledDates)\n    ? disabledDates.some(d => getMomentFromDate(d).isBetween(interval.start, interval.end))\n    : false;\n\n  const disabled = props.disabled || isBeforeDisabled || isAfterDisabled || isDisabledDate;\n  return (\n    <label className={classNames('check-calendar-checkbox__wrapper', { disabled }, props.className)}>\n      <span className=\"check-calendar-checkbox\">\n        <input\n          {...props}\n          onChange={_handleChange}\n          className={classNames('check-calendar-checkbox__input')}\n          type=\"checkbox\"\n          disabled={disabled}\n        />\n      <span className=\"check-calendar-checkbox__inner\" />\n    </span>\n    </label>\n  );\n}\n\nexport default Checkbox;\n","import * as React from 'react';\nimport {CheckCalendarProps, CheckCalendarState, MomentRange} from \"./types\";\nimport LeftIcon from \"./Left\";\nimport RightIcon from \"./Right\";\nimport classNames from \"classnames\";\nimport { defaultProps } from \"./defaults\";\nimport { CheckContextProvider } from \"./context\";\nimport RowHeader from \"./RowHeader\";\nimport moment from \"moment\";\nimport ColumnDate from \"./ColumnDate\";\nimport {getArrayDates, getMomentFromNumber, getMomentsFromRange, isInInterval} from \"./helpers\";\nimport Checkbox, {CheckBoxChangeHandler} from \"./CheckBox\";\n\nimport './styles.css';\n\nclass CheckCalendar extends React.Component<CheckCalendarProps, CheckCalendarState> {\n  static defaultProps = defaultProps;\n\n  state = {\n    loading: false,\n    currentDate: moment(this.props.start).set('day', this.props.startWeekDay || 1),\n    checkedRanges: []\n  };\n\n  render() {\n    const {\n      hoursIntervals,\n      hideDays,\n      max,\n      min,\n      checkedDates,\n      leftButton,\n      rightButton,\n      containerClassName,\n      tableClassName,\n      headerClassName,\n      contentClassName\n    } = this.props;\n\n    const { loading, currentDate, checkedRanges } = this.state;\n    const dates = getArrayDates(currentDate, 7);\n    const checked = Array.isArray(checkedDates) ? checkedDates : checkedRanges;\n\n    return (\n      <CheckContextProvider value={{ props: this.props }}>\n        <div className={classNames('check-calendar', containerClassName)}>\n          <button\n            className={classNames('check-calendar__button check-calendar__prev', leftButton?.className)}\n            disabled={!!min && dates[0].clone().subtract(1, 'day').isBefore(moment(min))}\n            onClick={this._handlePrevious}\n          >\n            {leftButton?.content || <LeftIcon/>}\n          </button>\n          <button\n            className={classNames('check-calendar__button check-calendar__next', rightButton?.className)}\n            disabled={!!max && dates[dates.length - 1].clone().add(1, 'day').isAfter(moment(max))}\n            onClick={this._handleNext}\n          >\n            {rightButton?.content || <RightIcon/>}\n          </button>\n          <div\n            className={classNames('check-calendar__container', {'check-calendar__container--hide': loading})}\n            ref=\"calendar\"\n          >\n            <table className={classNames('check-calendar__table', tableClassName)}>\n              <thead/>\n              <tbody>\n              <tr className=\"check-calendar__header\">\n                <td\n                  className={classNames(headerClassName)}\n                />\n                {dates.map((current) => {\n                    return (\n                      <td\n                        key={current.format('YYYY_MM_DD')}\n                        className={classNames(headerClassName, { 'check-calendar__hidden': hideDays?.includes(current.day()) })}\n                      >\n                        <ColumnDate date={current} />\n                      </td>\n                    );\n                  })}\n              </tr>\n              {hoursIntervals && hoursIntervals.map((row) => (\n                <tr key={`${row.start}_${row.end}`}>\n                  <RowHeader item={row} />\n                  {dates.map(day => {\n                    const interval = {\n                      start: getMomentFromNumber(day, row.start),\n                      end: getMomentFromNumber(day, row.end)\n                    };\n\n                    return (\n                      <td\n                        key={`${day.format('YYYY_MM_DD')}_${row.start}_${row.end}`}\n                        className={classNames(contentClassName, { 'check-calendar__hidden': hideDays?.includes(day.day()) })}\n                      >\n                        <Checkbox\n                          interval={interval}\n                          onChange={this._handleChange}\n                          checked={!!(checked).find(c => isInInterval(c, interval))}\n                          value=\"off\"\n                        />\n                      </td>\n                    )\n                  })}\n                </tr>\n              ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </CheckContextProvider>\n    );\n  }\n\n  _handlePrevious = () => {\n    this.setState({ loading:true });\n    setTimeout(() => {\n      this.setState({\n        loading:false,\n        currentDate: this.state.currentDate.clone().subtract(7, 'days')\n      }, this.props.onPreviousClick);\n\n    }, 400);\n\n  };\n\n  _handleNext = () => {\n    this.setState({ loading: true });\n\n    setTimeout(() => {\n      this.setState({\n        loading: false,\n        currentDate: this.state.currentDate.clone().add(7, 'days')\n      }, this.props.onNextClick);\n    }, 400);\n  };\n\n  _handleChange: CheckBoxChangeHandler = ( value, props) => {\n    const { checkedRanges } = this.state;\n    const { interval } = props;\n    const { onChange, checkedDates } = this.props;\n    let newChecked = [...Array.isArray(checkedDates) ? checkedDates : checkedRanges];\n    if (value) {\n      newChecked.push(interval);\n    } else {\n\n      const foundIndex = newChecked.findIndex((c) => isInInterval(c, interval));\n\n      if (foundIndex > -1) {\n        newChecked.splice(foundIndex, 1);\n      }\n    }\n\n    newChecked = newChecked.map(i => getMomentsFromRange(i));\n\n    if (onChange) {\n\n      onChange({\n        dates: (newChecked as MomentRange[]).map(i => ({ start: i.start.toDate(), end: i.end.toDate() })) ,\n        moments: newChecked as MomentRange[]\n      });\n\n    }\n\n    if (!Array.isArray(checkedDates)) {\n      this.setState({ checkedRanges: newChecked as MomentRange[] });\n    }\n  };\n\n}\n\nexport {\n  CheckCalendar,\n  CheckCalendarProps,\n  defaultProps,\n  LeftIcon,\n  RightIcon\n};\n","import React from 'react'\n\nimport { CheckCalendar } from 'react-check-calendar';\nimport 'react-check-calendar/dist/index.css';\nimport moment from 'moment';\n\nconst App = () => {\n  const [dates, setDates] = React.useState([{ moments: { start: moment().set('hour', 16), end: new Date() }}]);\n  return (\n    <div>\n      <div className=\"container\">\n        <CheckCalendar\n          min={new Date()}\n          onChange={(dates) => setDates(dates)}\n          checkedDates={dates.moments}\n          disableBefore={moment().subtract(4, 'hours')}\n          disableAfter={moment().add(5, 'days')}\n        />\n      </div>\n    </div>\n\n  )\n};\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}